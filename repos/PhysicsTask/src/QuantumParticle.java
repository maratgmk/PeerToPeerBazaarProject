public class QuantumParticle {
    /**
     * Для построения спектра энергии квантовой частицы в двумерной прямоугольной яме,
     * где одно измерение (y) является компактным (от 0 до (2\pi)),
     * а другое (x) — бесконечным, можно использовать уравнение Шрёдингера для двумерной системы.
     * Энергия квантовой частицы в двумерной яме может быть выражена как:
     * [ E_{n_x, n_y} = \frac{\hbar^2 \pi^2}{2m} \left( \frac{n_x^2}{L_x^2} + \frac{n_y^2}{(2\pi)^2} \right) ]
     * где:
     * (n_x) — квантовое число по оси x (может принимать значения 1, 2, 3, ...),
     * (n_y) — квантовое число по оси y (может принимать значения 1, 2, 3, ...),
     * (L_x) — длина ямы по оси x,
     * (\hbar) — редуцированная постоянная Планка,
     * (m) — масса частицы.
     */

    /**
     * Для построения спектра энергии квантовой частицы в двумерной прямоугольной яме,
     * где одно измерение (y) является компактным (от 0 до 2π),
     * а другое (x) — бесконечным, можно использовать уравнение Шрёдингера для двумерной системы.
     * Энергия квантовой частицы в двумерной яме может быть выражена следующим образом:
     * E(n_x, n_y) = (ħ² * π² / (2 * m)) * (n_x² / L_x² + n_y² / (2π)²)
     * где:
     * n_x — квантовое число по оси x (может принимать значения 1, 2, 3, ...),
     * n_y — квантовое число по оси y (может принимать значения 1, 2, 3, ...),
     * L_x — длина ямы по оси x,
     * ħ — редуцированная постоянная Планка,
     * m — масса частицы.
     */
    public static void main(String[] args) {
        double hbar = 1.0545718e-34; // редуцированная постоянная Планка в Дж·с
        double m = 9.10938356e-31; // масса электрона в кг
        double Lx = 1e-9; // длина ямы по оси x в метрах (например, 1 нм)

        int nMax = 5; // максимальное значение квантового числа
        System.out.printf("%-10s %-10s %-10s\n", "n_x", "n_y", "Energy (J)");

        for (int n_x = 1; n_x <= nMax; n_x++) {
            for (int n_y = 1; n_y <= nMax; n_y++) {
                double energy = (hbar * hbar * Math.PI * Math.PI / (2 * m)) *
                        (Math.pow(n_x / Lx, 2) + Math.pow(n_y / (2 * Math.PI), 2));
                System.out.printf("%-10d %-10d %-10.3e\n", n_x, n_y, energy);
            }
        }
    }
}
