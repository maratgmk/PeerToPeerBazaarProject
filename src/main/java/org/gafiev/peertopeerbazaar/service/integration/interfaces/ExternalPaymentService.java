package org.gafiev.peertopeerbazaar.service.integration.interfaces;

import org.gafiev.peertopeerbazaar.dto.integreation.request.ExternalPaymentRequest;
import org.gafiev.peertopeerbazaar.dto.integreation.response.ExternalPaymentResponse;

public interface ExternalPaymentService {

    /**
     * метод создания транзакции в платежной системе.
     * @param externalPaymentRequest данные платежа и дополнительные данные для его осуществления
     * @return данные для редиректа пользователя на платежную страницу, либо данные об ошибки
     */
    ExternalPaymentResponse createTransaction(ExternalPaymentRequest externalPaymentRequest);

}

//запрос 1й)  создание платежной транзакции, в запросе передать сумму, валюту, идентификатор платежа id, данные от кого (покупатель), кому (наше приложение),
// ответ придет ссылка на платежную страницу , где будет платеж
// тогда надо отправить ссылку на контроллер приложения и отправить ссылку редирект обратно на сайт приложения
// номер нашего счета компании,  фио отправителя (покупатель), номер счета клиента,
// запрос 2й)  придет к нам , надо записать контроллер для колбэка.

//1) Запрос на создание операции перевода денег пользователя на счёт Вашего приложения с суммой и валютой,
// реквизитами получателя, идентификатором платежа на стороне Вашего приложения, урлом для редиректа на ваше приложение
// (можно завести отдельный контроллер, который будет обрабатывать запросы редиректа).
// 2) В ответ на запрос платёжная система отдаёт URI с платёжной страницей.
// При переходе по этому URI пользователь должен ввести данные с банковской карты.
// 3) Платёжная система получает данные и, если они корректны, делает запрос к вашему контроллеру (создайте отдельный CallbackController).
// В запросе указывается статус платежа и его ID. Получив такой запрос, отвечайте платёжной системе кодом 200
//  и меняйте статус платежа в своей БД, после чего клиенту становится доступно создание доставки.
// Т.е. нужно в метод создания доставки проверить, что платёж выполнен.